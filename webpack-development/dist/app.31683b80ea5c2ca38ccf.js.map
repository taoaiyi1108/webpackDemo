{"version":3,"sources":["webpack:///./src/index.js"],"names":["__webpack_require__","r","__webpack_exports__","element","button","br","lodash__WEBPACK_IMPORTED_MODULE_0__","lodash__WEBPACK_IMPORTED_MODULE_0___default","n","document","body","appendChild","createElement","innerHTML","a","join","onclick","e","then","bind","moudle","print","default"],"mappings":"2FAAAA,EAAAC,EAAAC,GAAA,IAsCAC,EAEAC,EACAC,EAzCAC,EAAAN,EAAA,QAAAO,EAAAP,EAAAQ,EAAAF,GA4DAG,SAAAC,KAAAC,aAtBAR,EAAAM,SAAAG,cAAA,OAEAR,EAAAK,SAAAG,cAAA,UACAP,EAAAI,SAAAG,cAAA,MAEAR,EAAAS,UAAA,oCACAV,EAAAU,UAAwBN,EAAAO,EAACC,KAAA,yBACzBZ,EAAAQ,YAAAN,GACAF,EAAAQ,YAAAP,GAEAA,EAAAY,QAAAC,IAA0BjB,EAAAiB,EAAA,GAAAC,KAAAlB,EAAAmB,KAAA,cAAuCD,KAAAE,KAEjEC,EADAD,EAAAE,cAIAnB","file":"app.31683b80ea5c2ca38ccf.js","sourcesContent":["import _ from 'lodash';\r\n/* import { cube } from './math.js';\r\nimport './style.css';\r\n\r\n\r\n// process.env.NODE_ENV 环境变量关联 NODE_ENV 是一个由 Node.js 暴露给执行脚本的系统环境变量\r\n// 通常用于决定在开发环境与生产环境(dev-vs-prod)下，server tools(服务期工具)、build scripts(构建脚本) 和 client-side libraries(客户端库) 的行为\r\nif (process.env.NODE_ENV != 'production') {\r\n    console.log('Looks like we are in development mode!');\r\n}\r\n\r\n\r\nfunction component() {\r\n    var element = document.createElement('pre');\r\n\r\n    element.innerHTML = [\r\n        'Hello webpack!',\r\n        '5 cubed is equal to ' + cube(5)\r\n    ].join('\\n\\n');\r\n\r\n    return element;\r\n}\r\ndocument.body.appendChild(component()); */\r\n\r\n\r\n/* ******************动态导入 懒加载 *************************  */\r\n// async function getComponent() {\r\nfunction component() {\r\n    // import() 会返回一个 promise, 因此它可以和 async 函数一起使用 需要使用像 Babel 这样的预处理器\r\n\r\n    // return import(/* webapckChunkName \"lodash\" */ 'lodash').then(({ default: _ }) => {\r\n    //     var element = document.createElement('div');\r\n    //     element.innerHTML = _.join(['Hello', 'webpack'], ' ');\r\n\r\n    //     return element;\r\n    // }).catch(error => 'An error occurred while loading the component');\r\n\r\n    // 使用 async\r\n    var element = document.createElement('div');\r\n    // const { default: _ } = await import('lodash');\r\n    var button = document.createElement('button');\r\n    var br = document.createElement('br');\r\n\r\n    button.innerHTML = 'Click me and look at the console!';\r\n    element.innerHTML = _.join(['Hello', 'webpack'], ' ');\r\n    element.appendChild(br);\r\n    element.appendChild(button);\r\n    // 请注意，由于涉及网络请求，因此需要在生产级别站点/应用程序中显示某些加载指示。\r\n    button.onclick = e => import(/* webpackChunkName */'./print').then(moudle =>{\r\n        var print =  moudle.default;\r\n        print();\r\n    })\r\n\r\n    return element;\r\n}\r\n\r\n/* getComponent().then(component => {\r\n    document.body.appendChild(component);\r\n}) */\r\n\r\ndocument.body.appendChild(component());\r\n\r\n\r\n"],"sourceRoot":""}